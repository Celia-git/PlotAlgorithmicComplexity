1) The worst case runtime for quicksort is O(n^2), which is theoretically slower than merge sort, whose worst case runtime is O(nlogn)
2) We expected Hoare's partition to perform faster, because it performs fewer swaps on average than Lomuto's partition.  
3) Quicksort was faster in practice than merge sort, especially at lower values of n.  Hoare's partition improved the runtime of quicksort more than did lomuto's partition, with the gap between them increasing as n increases.
	Theoretically, Quicksort is slower than Merge Sort. However, because quicksort used hoare and lomuto to partition the array, it was running more efficiently than it would with in-place partitions.  As expected, Hoare's partition improved the runtime of quicksort more than Lomuto's partition because Hoare's partition requires fewer swaps.  The difference in the amount of swaps both partitions use increases with n, hence, the difference between Hoare's and Lomuto's quicksort runtimes increase with n.  
